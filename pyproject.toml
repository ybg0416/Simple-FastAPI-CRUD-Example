[project]
name = "simple-fastapi-crud-example"
version = "0.1.0"
readme = "README.md"
requires-python = ">=3.13"
dependencies = [
    "asyncpg~=0.30.0",
    "fastapi~=0.115.12",
    "greenlet==3.2.3",
    "loguru~=0.7.3",
    "phonenumbers==9.0.7",
    "psutil==7.0.0",
    "pydantic[email]==2.11.7",
    "pydantic-core~=2.33.2",
    "pydantic-extra-types~=2.10.1",
    "pydantic-settings==2.9.1",
    "sqlalchemy~=2.0.36",
    "sqlmodel~=0.0.22",
    "starlette~=0.40.0",
    "uuid~=1.30",
    "uvicorn~=0.34.0",
    "pandas>=2.3.0",
    "coverage==7.9.1",
]

[dependency-groups]
dev = [
    "black>=25.1.0",
    "coverage[toml]>=7.8.2",
    "isort>=6.0.1",
    "pytest>=8.4.0",
    "ruff>=0.11.13",
]


[tool.isort]
profile = "black"

[tool.ruff]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
    "UP",  # pyupgrade
]
ignore = [
    "E203",  # whitespace-before-punctuation
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]
unfixable = [
    "B"  # flake8-bugbear
]

[tool.ruff.per-file-ignores]
"__init__.py" = [
    "E402",  # module-import-not-at-top-of-file
    "F401"  # Module imported but unused
]

[tool.ruff.isort]
known-third-party = ["fastapi", "pydantic", "starlette"]

[tool.coverage.report]
show_missing = true
fail_under = 95
exclude_lines = [
    "def __repr__",
    "if TYPE_CHECKING:",
]
